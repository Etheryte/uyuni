{
  "include": [
    "components/**/*",
    "core/**/*",
    "manager/**/*",
    "utils/**/*",
    //"vendors/**/*",
    "global.d.ts"
  ],
  "exclude": ["**/node_modules", "**/.*/"],
  // "extends": "@snowpack/app-scripts-react/tsconfig.base.json",
  "compilerOptions": {
    // You can't currently define paths in your 'extends' config,
    // so we have to set 'baseUrl' & 'paths' here.
    // Don't change these unless you know what you're doing.
    // See: https://github.com/microsoft/TypeScript/issues/25430
    "baseUrl": "./",
    "paths": {
      "*": [ "web_modules/.types/*" ],
      "components/*": [ "./components/*" ],
      "core/*": [ "./core/*" ],
      "manager/*": [ "./manager/*" ],
      "utils/*": [ "./utils/*" ],
      // "vendors/*": [ "./vendors/*" ]
    },
    
    // TODO: Merge
    "module": "esnext",
    "target": "esnext",
    // "module": "ES6",
    // "target": "es5"
    "moduleResolution": "node",
    // "importsNotUsedAsValues": "error",
    "importsNotUsedAsValues": "preserve",
    /* more strict checking for errors that per-file transpilers like `esbuild` would crash */
    "isolatedModules": true,
    /* Additional Options */
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    
    // Our configuration options
    "jsx": "react",
    // "jsx": "preserve",
    // Eventually this should be `true`
    "noImplicitAny": false,
    // Eventually this should be `false`
    "allowJs": true,
    /* noEmit - We only use TypeScript for type checking. */
    "noEmit": true,
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    // "resolveJsonModule": false,
    // "moduleResolution": "node",
    // TODO: These seem messed up, needs some work
    //"typeRoots": [],
    //"types"
  }
}
